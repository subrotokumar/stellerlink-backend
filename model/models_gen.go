// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AscensionMaterials struct {
	Quantity int       `json:"quantity"`
	Material *Material `json:"material"`
}

type AscensionMaterialsInput struct {
	Quantity int            `json:"quantity"`
	Material *MaterialInput `json:"material"`
}

// Character Data
type Character struct {
	ID         int         `json:"id"`
	Name       string      `json:"name"`
	Images     *Images     `json:"images,omitempty"`
	Faction    string      `json:"faction"`
	Rarity     int         `json:"rarity"`
	Path       Path        `json:"path"`
	CombatType CombatType  `json:"combatType"`
	Story      string      `json:"story"`
	Stats      []*StatItem `json:"stats"`
	Eidolons   []*Eidolon  `json:"eidolons"`
}

// Input Character
type CharacterInput struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	Images     *ImageInput      `json:"images,omitempty"`
	Faction    string           `json:"faction"`
	Rarity     int              `json:"rarity"`
	Path       Path             `json:"path"`
	CombatType CombatType       `json:"combatType"`
	Story      string           `json:"story"`
	Stats      []*StatItemInput `json:"stats"`
	Eidolons   []*EidolonInput  `json:"eidolons"`
}

type Eidolon struct {
	Index       int    `json:"index"`
	Image       string `json:"image"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Logo        string `json:"logo"`
}

type EidolonInput struct {
	Index       int    `json:"index"`
	Image       string `json:"image"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Logo        string `json:"logo"`
}

type ImageInput struct {
	Splash      string `json:"splash"`
	Profile     string `json:"profile"`
	Transparent string `json:"transparent"`
}

type Images struct {
	Profile     string  `json:"profile"`
	Splash      string  `json:"splash"`
	Transparent *string `json:"transparent,omitempty"`
}

// LightCones
type LightCone struct {
	ID          int                  `json:"id"`
	Concepts    string               `json:"concepts"`
	Rarity      int                  `json:"rarity"`
	Path        Path                 `json:"path"`
	Description string               `json:"description"`
	SkillName   string               `json:"skill_name"`
	Skill       string               `json:"skill"`
	Story       string               `json:"story"`
	Material    []*LightConeMaterial `json:"material"`
}

type LightConeMaterial struct {
	Concepts string `json:"concepts"`
	Quantity string `json:"quantity"`
}

type Material struct {
	Name        string   `json:"name"`
	Rarity      int      `json:"rarity"`
	Type        []string `json:"type"`
	Description string   `json:"description"`
	Story       string   `json:"story"`
}

type MaterialInput struct {
	Name        string   `json:"name"`
	Rarity      int      `json:"rarity"`
	Type        []string `json:"type"`
	Description string   `json:"description"`
	Story       string   `json:"story"`
}

// Relics
type Relic struct {
	ID           int       `json:"id"`
	Concepts     string    `json:"concepts"`
	Image        string    `json:"image"`
	Type         RelicType `json:"type"`
	Head         *RelicSet `json:"head,omitempty"`
	Hands        *RelicSet `json:"hands,omitempty"`
	Body         *RelicSet `json:"body,omitempty"`
	Feet         *RelicSet `json:"feet,omitempty"`
	PlanarSphere *RelicSet `json:"planarSphere,omitempty"`
	LinkRope     *RelicSet `json:"linkRope,omitempty"`
	SetEffect    string    `json:"setEffect"`
}

type RelicSet struct {
	Concepts    string  `json:"concepts"`
	Image       string  `json:"image"`
	Type        SetType `json:"type"`
	Description string  `json:"description"`
	Story       string  `json:"story"`
}

type StatItem struct {
	Level              string                `json:"level"`
	Atk                float64               `json:"atk"`
	Def                float64               `json:"def"`
	Hp                 int                   `json:"hp"`
	Spd                int                   `json:"spd"`
	CritRate           string                `json:"critRate"`
	CritDamage         string                `json:"critDamage"`
	Taunt              int                   `json:"taunt"`
	Enengy             int                   `json:"enengy"`
	AscensionMaterials []*AscensionMaterials `json:"ascensionMaterials"`
}

type StatItemInput struct {
	Level              string                     `json:"level"`
	Atk                float64                    `json:"atk"`
	Def                float64                    `json:"def"`
	Hp                 int                        `json:"hp"`
	Spd                int                        `json:"spd"`
	CritRate           string                     `json:"critRate"`
	CritDamage         string                     `json:"critDamage"`
	Taunt              int                        `json:"taunt"`
	Energy             int                        `json:"energy"`
	AscensionMaterials []*AscensionMaterialsInput `json:"ascensionMaterials"`
}

// Combat Types
type CombatType string

const (
	CombatTypePhysical  CombatType = "Physical"
	CombatTypeFire      CombatType = "Fire"
	CombatTypeIce       CombatType = "Ice"
	CombatTypeLightning CombatType = "Lightning"
	CombatTypeWind      CombatType = "Wind"
	CombatTypeQuantum   CombatType = "Quantum"
	CombatTypeImaginary CombatType = "Imaginary"
)

var AllCombatType = []CombatType{
	CombatTypePhysical,
	CombatTypeFire,
	CombatTypeIce,
	CombatTypeLightning,
	CombatTypeWind,
	CombatTypeQuantum,
	CombatTypeImaginary,
}

func (e CombatType) IsValid() bool {
	switch e {
	case CombatTypePhysical, CombatTypeFire, CombatTypeIce, CombatTypeLightning, CombatTypeWind, CombatTypeQuantum, CombatTypeImaginary:
		return true
	}
	return false
}

func (e CombatType) String() string {
	return string(e)
}

func (e *CombatType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CombatType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CombatType", str)
	}
	return nil
}

func (e CombatType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Path
type Path string

const (
	PathDestruction  Path = "Destruction"
	PathHunt         Path = "Hunt"
	PathErudition    Path = "Erudition"
	PathHarmony      Path = "Harmony"
	PathNihility     Path = "Nihility"
	PathPreservation Path = "Preservation"
	PathAbundance    Path = "Abundance"
)

var AllPath = []Path{
	PathDestruction,
	PathHunt,
	PathErudition,
	PathHarmony,
	PathNihility,
	PathPreservation,
	PathAbundance,
}

func (e Path) IsValid() bool {
	switch e {
	case PathDestruction, PathHunt, PathErudition, PathHarmony, PathNihility, PathPreservation, PathAbundance:
		return true
	}
	return false
}

func (e Path) String() string {
	return string(e)
}

func (e *Path) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Path(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Path", str)
	}
	return nil
}

func (e Path) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RelicType string

const (
	RelicTypeCavernRelics    RelicType = "CavernRelics"
	RelicTypePlanarOrnaments RelicType = "PlanarOrnaments"
)

var AllRelicType = []RelicType{
	RelicTypeCavernRelics,
	RelicTypePlanarOrnaments,
}

func (e RelicType) IsValid() bool {
	switch e {
	case RelicTypeCavernRelics, RelicTypePlanarOrnaments:
		return true
	}
	return false
}

func (e RelicType) String() string {
	return string(e)
}

func (e *RelicType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelicType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelicType", str)
	}
	return nil
}

func (e RelicType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SetType string

const (
	SetTypeHead         SetType = "head"
	SetTypeHeads        SetType = "heads"
	SetTypeBody         SetType = "body"
	SetTypeFeet         SetType = "feet"
	SetTypePlanarSphere SetType = "planarSphere"
	SetTypeLinkRope     SetType = "linkRope"
)

var AllSetType = []SetType{
	SetTypeHead,
	SetTypeHeads,
	SetTypeBody,
	SetTypeFeet,
	SetTypePlanarSphere,
	SetTypeLinkRope,
}

func (e SetType) IsValid() bool {
	switch e {
	case SetTypeHead, SetTypeHeads, SetTypeBody, SetTypeFeet, SetTypePlanarSphere, SetTypeLinkRope:
		return true
	}
	return false
}

func (e SetType) String() string {
	return string(e)
}

func (e *SetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SetType", str)
	}
	return nil
}

func (e SetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
